
/*
 * Bilder generieren:  https://javl.github.io/image2cpp/
 * 
 * 
 */
 
#include "ILI9341_Graphic.h"

/*
TFT::TFT(uint8_t CS, uint8_t RS, uint8_t RST) 
  : Adafruit_ST7735(CS, RS, RST)
{
  // as we already know the orientation (landscape, therefore rotated),
  // set default width and height without need to call begin() first.
  _width = ST7735_TFTHEIGHT;
  _height = ST7735_TFTWIDTH;
}*/

ILI9341_Graphic::ILI9341_Graphic(uint8_t CS, uint8_t RS, uint8_t RST) : Adafruit_ILI9341(CS, RS, RST)
{
  // as we already know the orientation (landscape, therefore rotated),
  // set default width and height without need to call begin() first.
  _width = 320;
  _height = 240;
}

/*
void ILI9341_Graphic::begin()
{
  begin();
  //setRotation(3);
  //fillScreen(ILI9341_RED);
  // ILI9341_Graphic.fillScreen(ILI9341_BLACK);
}
*/

void ILI9341_Graphic::Setup()
{
  setRotation(3);
  fillScreen(ILI9341_BLACK);
}


void ILI9341_Graphic::TextBits(int xPos, int yPos, long lValue, uint16_t u16Color)
{
  String sText;
  float  fValue;
  char   sBuf[6];
  
  lValue = abs(lValue);
  if(lValue > 999999){                                  // wenn Wert > 999 MBit/s
    fValue = (float)lValue / 1000000;
    if(fValue < 10) dtostrf(fValue, 4, 2, sBuf);        // 1 Vorkommazeichen + "Punkt" + 2 Nachkommazeichen + '\0' = 6 Array-Felder
    else if(fValue < 100) dtostrf(fValue, 3, 0, sBuf);  // 2 Vorkommazeichen + 0 Nachkommazeichen + '\0' = 5 Array-Felder
    else dtostrf(fValue, 3, 0, sBuf);                   // 3 Vorkommazeichen + 0 Nachkommazeichen + '\0' = 5 Array-Felder
    sBuf[5] = '\0';
    sText = String(sBuf);
    sText.replace(".", ",");
    sText.trim();
  }
  else if(lValue > 999){                          // wenn Wert > 999 kBit/s
    fValue = (float)lValue / 1000;
    if(fValue < 10) dtostrf(fValue, 4, 2, sBuf);        // 1 Vorkommazeichen + "Punkt" + 2 Nachkommazeichen + '\0' = 6 Array-Felder
    else if(fValue < 100) dtostrf(fValue, 3, 0, sBuf);  // 2 Vorkommazeichen + 0 Nachkommazeichen + '\0' = 5 Array-Felder
    else dtostrf(fValue, 3, 0, sBuf);                   // 3 Vorkommazeichen + 0 Nachkommazeichen + '\0' = 5 Array-Felder
    sBuf[5] = '\0';
    sText = String(sBuf);
    sText.replace(".", ",");
    sText.trim();
  }
  else sText = String(lValue);                          // wenn Wert < 1000 kBit/s
  
  while(sText.length() < 4) sText = " " + sText;        // Links mit Leerzeichen auffüllen zur rechtbündige Ausrichtung
  setCursor(xPos, yPos);
  setTextSize(1);
  setTextColor(u16Color, ILI9341_BLACK);
  print(sText);

  if(lValue > 999999) sText = "G";              // wenn Wert > 999999 = Gbit/s
  else if(lValue > 999) sText = "M";            // wenn Wert > 999 = Mbit/s
  else sText = "K";                             // wenn Wert < 1000 = Bit/s
  setCursor(xPos+27, yPos);
  print(sText);
}


/*  Der Farbwert besteht aus 5 Bit (0..31) für die Farben Rot und Blau sowie 6 Bit (0...63) füe die Farbe Grün.
* Zur Vereinfachung werden dieser Funktion jeweils gültige Farbwerte von 0...255 übergeben.
* Diese werden in den gültigen Wertebereich umgerechnet und in den 16-Bit Wert geschrieben: uint16_t (RRRRRGGGGGGBBBBB) 
*/
uint16_t ILI9341_Graphic::getColorValue(byte bRed, byte bGreen, byte bBlue)
{
  uint16_t iRed;
  uint16_t iGreen;
  uint16_t iBlue;

  iRed = bRed & B11111000;
  iRed = iRed << 8;
  iGreen = bGreen & B11111000;
  iGreen = iGreen << 3;
  iBlue = bBlue & B11111000;
  iBlue = iBlue >> 3;
  return (iRed | iGreen | iBlue);
}


void ILI9341_Graphic::Connection(int xPos, int yPos, boolean bStatus)
{
  static boolean blnDirection = false;  
  static byte bPosition = 0;
  byte bOldPosition;
  uint16_t iColor;
  
  if(bStatus==false){
    fillCircle(xPos + bPosition, yPos, 4, ILI9341_BLACK);
    drawLine(xPos, yPos, xPos+80, yPos, ILI9341_BLACK);
  }
  if(bStatus==true){
    bOldPosition = bPosition;
    if(blnDirection == true){
      iColor = ILI9341_GREEN;
      bPosition = bPosition -5;
      if(bPosition < 7) blnDirection = false;
    }
    else {
      iColor = ILI9341_CYAN;
      bPosition = bPosition + 5;
      if(bPosition > 73) blnDirection = true;
    }
    fillCircle(xPos + bOldPosition, yPos, 4, ILI9341_BLACK);
    fillCircle(xPos + bPosition, yPos, 4, iColor);
    drawLine(xPos, yPos, xPos+80, yPos, iColor);
  }
}


void ILI9341_Graphic::Grid_01(int xPos, int yPos, long currentValue, long maxValue, uint16_t barColor)
{
  static long arrayValue[226];
  static int iOldValue;  
  int iValue;
  int iBlack;
  int iStepwidth; 
  
  if(maxValue==0){
    iOldValue = 0;
    for(int i=0; i<226; i++){
      arrayValue[i] = 0;
    }
    return;
  }

  for(int i=220; i>0; i--)  arrayValue[i+5] = arrayValue[i];

  if(currentValue>maxValue) currentValue = maxValue;
  iValue = int(74 * currentValue / maxValue);

  iStepwidth = iOldValue - iValue;
  iStepwidth = int(iStepwidth / 4);
  arrayValue[1] = iValue;
  arrayValue[2] = iStepwidth + iValue;
  arrayValue[3] = (iStepwidth * 2) + iValue;
  arrayValue[4] = (iStepwidth * 3) + iValue;
  arrayValue[5] = iOldValue;

  iOldValue = iValue;

  drawRect(xPos, yPos, 226, 76, ILI9341_WHITE);
  for(int i=1; i<225; i++){
    if(i%15==0) drawFastVLine(xPos + i, yPos + 1, 74, ILI9341_DARKGREY);
    else{
      iValue = arrayValue[i];
      if(iValue<1) iValue = 1;
      iBlack = 74 - iValue;
      drawFastVLine(xPos + i, yPos + 1 + iBlack, iValue, barColor);
      drawFastVLine(xPos + i, yPos + 1, iBlack, ILI9341_BLACK);
      drawPixel(xPos + i, yPos + 15, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 30, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 45, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 60, ILI9341_DARKGREY);
    } 
  }
}

void ILI9341_Graphic::Grid_02(int xPos, int yPos, long currentValue, long maxValue, uint16_t barColor)
{
  static long arrayValue[226];
  static int iOldValue;  
  int iValue;
  int iBlack;
  int iStepwidth; 
  
  if(maxValue==0){
    iOldValue = 0;
    for(int i=0; i<226; i++){
      arrayValue[i] = 0;
    }
    return;
  }

  for(int i=220; i>0; i--)  arrayValue[i+5] = arrayValue[i];

  if(currentValue>maxValue) currentValue = maxValue;
  iValue = int(74 * currentValue / maxValue);

  iStepwidth = iOldValue - iValue;
  iStepwidth = int(iStepwidth / 4);
  arrayValue[1] = iValue;
  arrayValue[2] = iStepwidth + iValue;
  arrayValue[3] = (iStepwidth * 2) + iValue;
  arrayValue[4] = (iStepwidth * 3) + iValue;
  arrayValue[5] = iOldValue;

  iOldValue = iValue;

  drawRect(xPos, yPos, 226, 76, ILI9341_WHITE);
  for(int i=1; i<225; i++){
    if(i%15==0) drawFastVLine(xPos + i, yPos + 1, 74, ILI9341_DARKGREY);
    else{
      iValue = arrayValue[i];
      if(iValue<1) iValue = 1;
      iBlack = 74 - iValue;
      drawFastVLine(xPos + i, yPos + 1 + iBlack, iValue, barColor);
      drawFastVLine(xPos + i, yPos + 1, iBlack, ILI9341_BLACK);
      drawPixel(xPos + i, yPos + 15, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 30, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 45, ILI9341_DARKGREY);
      drawPixel(xPos + i, yPos + 60, ILI9341_DARKGREY);
    } 
  }
}

void ILI9341_Graphic::Wifi(int xPos, int yPos, uint16_t u16Color, String sDbValue)
{
  // 'WiFi', 31x22px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x01, 0xff, 0xff, 0x80, 
    0x07, 0xe0, 0x0f, 0xc0, 0x0f, 0x00, 0x01, 0xe0, 0x1e, 0x00, 0x00, 0xf0, 0x3c, 0x07, 0xc0, 0x78, 
    0x78, 0x1f, 0xf0, 0x3c, 0x70, 0x7e, 0xfc, 0x1c, 0x20, 0xf0, 0x1e, 0x08, 0x01, 0xe0, 0x0f, 0x00, 
    0x03, 0xc0, 0x07, 0x80, 0x03, 0x80, 0x03, 0x80, 0x01, 0x03, 0x81, 0x00, 0x00, 0x07, 0xc0, 0x00, 
    0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 0xc0, 0x00, 
    0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 31, 22, u16Color);
  if(sDbValue.length() > 0){
    setTextColor(ILI9341_WHITE, ILI9341_BLACK);
    setTextSize(1);
    setCursor(xPos + 25, yPos + 22);
    print(sDbValue + "dBm");
  }
  else{
    fillRect(xPos + 24, yPos + 21, 43, 10, ILI9341_BLACK);
  }
}

void ILI9341_Graphic::Cloud(int xPos, int yPos, uint16_t u16Color)
{
  // 'Cloud', 32x20px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x1e, 0x78, 0x00, 0x00, 0x30, 0x1c, 0x00, 
    0x00, 0x60, 0x0e, 0x00, 0x00, 0xc0, 0x06, 0x00, 0x00, 0xc0, 0x07, 0xe0, 0x01, 0x80, 0x0e, 0x78, 
    0x0f, 0xc0, 0x18, 0x1c, 0x1c, 0x00, 0x10, 0x0c, 0x30, 0x00, 0x00, 0x06, 0x20, 0x00, 0x00, 0x06, 
    0x60, 0x00, 0x00, 0x02, 0x60, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x0e, 0x30, 0x00, 0x00, 0x0c, 
    0x38, 0x00, 0x00, 0x18, 0x1f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 32, 20, u16Color);
}

void ILI9341_Graphic::Computer(int xPos, int yPos, uint16_t u16Color)
{
  // 'Computer', 32x25px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xfe, 0x60, 0x00, 0x00, 0x06, 
    0x60, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x06, 0x60, 0x38, 0x08, 0x06, 0x60, 0x7c, 0x0c, 0x06, 
    0x60, 0xc4, 0xc4, 0x06, 0x60, 0xc0, 0xc6, 0x06, 0x60, 0xc0, 0x02, 0x06, 0x60, 0xc0, 0x03, 0x06, 
    0x60, 0xc4, 0xc1, 0x06, 0x60, 0x7c, 0xc1, 0x86, 0x60, 0x38, 0x00, 0x86, 0x60, 0x00, 0x00, 0x06, 
    0x60, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 0x06, 0x7f, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xfc, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 
    0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 32, 25, u16Color);
}

void ILI9341_Graphic::ArrowUp(int xPos, int yPos, uint16_t u16Color)
{
  // 'ArrowUp', 20x26px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xf0, 0x00, 0x01, 0xf8, 0x00, 0x03, 0xfc, 0x00, 0x07, 
    0xfe, 0x00, 0x0f, 0xff, 0x00, 0x1f, 0xff, 0x80, 0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xc0, 0x01, 0xf8, 
    0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 
    0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 
    0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 20, 26, u16Color);
}


void ILI9341_Graphic::ArrowUpTiny(int xPos, int yPos, uint16_t u16Color)
{
  // 'ArrowUp', 12x18px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x06, 0x00, 0x0f, 0x00, 0x1f, 0x80, 0x3f, 0xc0, 0x7f, 0xe0, 0x7f, 0xe0, 0x0f, 0x00, 
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 
    0x0f, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 12, 18, u16Color);
}


void ILI9341_Graphic::ArrowDown(int xPos, int yPos, uint16_t u16Color)
{
  // 'ArrowDown', 20x26px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 
    0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 
    0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 0x01, 0xf8, 0x00, 
    0x3f, 0xff, 0xc0, 0x3f, 0xff, 0xc0, 0x1f, 0xff, 0x80, 0x0f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x03, 
    0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 20, 26, u16Color);
}


void ILI9341_Graphic::ArrowDownTiny(int xPos, int yPos, uint16_t u16Color)
{
  // 'ArrowDown', 12x18px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 
    0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x7f, 0xe0, 0x7f, 0xe0, 0x3f, 0xc0, 0x1f, 0x80, 0x0f, 0x00, 
    0x06, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 12, 18, u16Color);
}


void ILI9341_Graphic::Router(int xPos, int yPos, boolean blnActive)
{
  // 'Router White', 42x32px
  const uint8_t bitmap_01[] = {
    0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0d, 0x80, 
    0x36, 0x00, 0x00, 0x00, 0x19, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1b, 0x60, 0xdb, 0x00, 0x00, 0x00, 
    0x1b, 0x60, 0xdb, 0x00, 0x00, 0x00, 0x12, 0x40, 0x49, 0x00, 0x00, 0x00, 0x12, 0x40, 0x49, 0x00, 
    0x00, 0x00, 0x1b, 0x60, 0xdb, 0x00, 0x00, 0x00, 0x1b, 0x60, 0xdb, 0x00, 0x00, 0x00, 0x19, 0x00, 
    0x13, 0x00, 0x00, 0x00, 0x0d, 0x80, 0x36, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x00, 
    0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x31, 0x80, 0x00, 0x00, 0xe0, 0x06, 0x31, 
    0x80, 0x00, 0x00, 0xe0, 0x06, 0x31, 0x80, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap_01, 42, 32, ILI9341_WHITE);
  
  // 'Router Antenna', 42x32px
  const uint8_t bitmap_02[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_02, 42, 32, ILI9341_LIGHTGREY);
  else drawBitmap(xPos, yPos, bitmap_02, 42, 32, ILI9341_DARKGREY);

  // 'Router Body', 42x32px
  const uint8_t bitmap_03[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 
    0x0f, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x1f, 0x1f, 0xf9, 0xce, 0x78, 0x00, 0x1f, 0x1f, 0xf9, 0xce, 
    0x78, 0x00, 0x1f, 0x1f, 0xf9, 0xce, 0x78, 0x00, 0x1f, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_03, 42, 32, 0xB000);
  else drawBitmap(xPos, yPos, bitmap_03, 42, 32, 0x3186);
  
  // 'Router Antenna Shape', 42x32px
  const uint8_t bitmap_04[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_04, 42, 32, ILI9341_BLUE);
  else drawBitmap(xPos, yPos, bitmap_04, 42, 32, ILI9341_DARKGREY);
  
  // 'Router Shape', 42x32px
  const uint8_t bitmap_05[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x38, 0x00, 
    0x30, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 
    0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0x30, 0x00, 
    0x00, 0x00, 0x0c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_05, 42, 32, ILI9341_RED);
  else drawBitmap(xPos, yPos, bitmap_05, 42, 32, ILI9341_LIGHTGREY);
  
  // 'Router Green LEDs', 42x32px
  const uint8_t bitmap_06[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 
    0x00, 0x00, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_06, 42, 32, ILI9341_DARKGREEN);
  else drawBitmap(xPos, yPos, bitmap_06, 42, 32, ILI9341_LIGHTGREY);
}


void ILI9341_Graphic::Earth(int xPos, int yPos, boolean blnActive)
{
  // 'Earth', 40x40px
  const uint8_t bitmap_01[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x0f, 0xc0, 0x70, 0x00, 0x00, 
    0x3f, 0x1f, 0xfc, 0x00, 0x00, 0x60, 0x37, 0xff, 0x00, 0x00, 0xc1, 0x07, 0xff, 0x80, 0x03, 0x80, 
    0xff, 0xff, 0xc0, 0x02, 0x01, 0xff, 0xff, 0xe0, 0x04, 0x03, 0xaf, 0xff, 0xf0, 0x08, 0x06, 0x1b, 
    0xff, 0xf0, 0x18, 0x00, 0x81, 0x7f, 0xf8, 0x10, 0x0f, 0xc0, 0x7f, 0xfc, 0x30, 0x0f, 0xff, 0xff, 
    0xfc, 0x20, 0x3f, 0xff, 0xb8, 0xfe, 0x20, 0x7f, 0xff, 0xbf, 0x1a, 0x60, 0x7f, 0xff, 0xdf, 0x1a, 
    0x40, 0x7f, 0xff, 0xcf, 0x0a, 0x40, 0x7f, 0xff, 0xec, 0x09, 0x40, 0x7f, 0xff, 0xf0, 0x09, 0x40, 
    0x7f, 0xff, 0xfe, 0x01, 0x60, 0x3f, 0xff, 0xfc, 0x01, 0x60, 0x01, 0xff, 0xfc, 0x01, 0x60, 0x00, 
    0x7f, 0xf8, 0x01, 0x70, 0x00, 0x7f, 0xf0, 0x03, 0x78, 0x00, 0x7f, 0xe0, 0x02, 0x38, 0x00, 0x3f, 
    0xe0, 0x02, 0x30, 0x00, 0x3f, 0xe0, 0x02, 0x38, 0x00, 0x3f, 0xe4, 0x02, 0x18, 0x00, 0x3f, 0xe4, 
    0x04, 0x18, 0x00, 0x3f, 0xcc, 0x04, 0x08, 0x00, 0x3f, 0x88, 0x08, 0x0c, 0x00, 0x1f, 0x80, 0x10, 
    0x06, 0x00, 0x1f, 0x00, 0x20, 0x03, 0x00, 0x0e, 0x00, 0x20, 0x01, 0x80, 0x00, 0x00, 0xc0, 0x00, 
    0xc0, 0x00, 0x01, 0x00, 0x00, 0x60, 0x00, 0x02, 0x00, 0x00, 0x1e, 0x00, 0x1c, 0x00, 0x00, 0x07, 
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_01, 40, 40, ILI9341_GREEN);
  else drawBitmap(xPos, yPos, bitmap_01, 40, 40, ILI9341_LIGHTGREY);

  // 'EarthWater', 40x40px
  const uint8_t bitmap_02[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 
    0x00, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xc8, 0x00, 0x00, 0x00, 0x3e, 0xf8, 0x00, 0x00, 0x00, 0x7f, 
    0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x50, 0x00, 0x00, 0x07, 0xf9, 0xe4, 
    0x00, 0x00, 0x07, 0xff, 0x7e, 0x80, 0x00, 0x0f, 0xf0, 0x3f, 0x80, 0x00, 0x0f, 0xf0, 0x00, 0x00, 
    0x00, 0x1f, 0xc0, 0x00, 0x47, 0x00, 0x1f, 0x80, 0x00, 0x40, 0xe4, 0x1f, 0x80, 0x00, 0x20, 0xe4, 
    0x3f, 0x80, 0x00, 0x30, 0xf4, 0x3f, 0x80, 0x00, 0x13, 0xf6, 0x3f, 0x80, 0x00, 0x0f, 0xf6, 0x3f, 
    0x80, 0x00, 0x01, 0xfe, 0x1f, 0xc0, 0x00, 0x03, 0xfe, 0x1f, 0xfe, 0x00, 0x03, 0xfe, 0x1f, 0xff, 
    0x80, 0x07, 0xfe, 0x0f, 0xff, 0x80, 0x0f, 0xfc, 0x07, 0xff, 0x80, 0x1f, 0xfc, 0x07, 0xff, 0xc0, 
    0x1f, 0xfc, 0x0f, 0xff, 0xc0, 0x1f, 0xfc, 0x07, 0xff, 0xc0, 0x1b, 0xfc, 0x07, 0xff, 0xc0, 0x1b, 
    0xf8, 0x07, 0xff, 0xc0, 0x33, 0xf8, 0x07, 0xff, 0xc0, 0x77, 0xf0, 0x03, 0xff, 0xe0, 0x7f, 0xe0, 
    0x01, 0xff, 0xe0, 0xff, 0xc0, 0x00, 0xff, 0xf1, 0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 
    0x3f, 0xff, 0xfe, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  if (blnActive == true) drawBitmap(xPos, yPos, bitmap_02, 40, 40, ILI9341_BLUE);
  else drawBitmap(xPos, yPos, bitmap_02, 40, 40, 0x3186);
}

void ILI9341_Graphic::Flash(int xPos, int yPos, uint16_t u16Color)
{
  // 'Flash', 20x34px
  const uint8_t bitmap[] = {
    0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x01, 0xfc, 0x00, 0x01, 0xfc, 0x00, 0x03, 0xf8, 0x00, 0x03, 
    0xf8, 0x00, 0x07, 0xf0, 0x00, 0x07, 0xf0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xe0, 0x00, 0x1f, 0xff, 
    0xc0, 0x1f, 0xff, 0xc0, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x00, 0x7f, 0x00, 0x00, 0x7f, 0x00, 
    0x00, 0x7e, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x01, 
    0xf8, 0x00, 0x3f, 0xff, 0xc0, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x00, 0x1f, 0xfe, 0x00, 0x1f, 0xfc, 
    0x00, 0x1f, 0xf8, 0x00, 0x0f, 0xf0, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0xc0, 0x00, 0x07, 0x80, 0x00, 
    0x07, 0x00, 0x00, 0x06, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 20, 34, u16Color);
}


void ILI9341_Graphic::FlashTiny(int xPos, int yPos, uint16_t u16Color)
{
  // 'Flash Tiny', 14x24px
  const uint8_t bitmap[] = {
    0x07, 0xc0, 0x07, 0x80, 0x0f, 0x80, 0x0f, 0x00, 0x1f, 0x00, 0x1e, 0x00, 0x3f, 0xf8, 0x3f, 0xf0, 
    0x7f, 0xf0, 0x01, 0xe0, 0x01, 0xe0, 0x03, 0xc0, 0x03, 0xc0, 0x03, 0x80, 0x07, 0x80, 0x7f, 0xf8, 
    0x7f, 0xf0, 0x3f, 0xe0, 0x3f, 0xc0, 0x3f, 0x80, 0x1f, 0x00, 0x1e, 0x00, 0x1c, 0x00, 0x08, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 14, 24, u16Color);
}


void ILI9341_Graphic::Flash02(int xPos, int yPos, uint16_t u16Color)
{
  // 'Flash 02', 32x32px
  const uint8_t bitmap[] = {
    0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x70, 0x00, 
    0x00, 0x00, 0xf0, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 
    0x00, 0x0f, 0xe0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 
    0x00, 0xff, 0x80, 0x00, 0x01, 0xff, 0x80, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xf0, 
    0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0x80, 0x00, 0x01, 0xff, 0x00, 
    0x00, 0x03, 0xfe, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 
    0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x00, 
    0x00, 0x0e, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap, 32, 32, u16Color);
}

void ILI9341_Graphic::Guest(int xPos, int yPos, uint16_t u16ColorF, uint16_t u16ColorB)
{
  // 'Gast vorne', 26x24px
  const uint8_t bitmap_front[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x01, 0xfc, 0x00, 
    0x00, 0x01, 0xfc, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x03, 0xfe, 0x00, 
    0x00, 0x01, 0xfc, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x03, 0xfe, 0x00, 
    0x00, 0x03, 0xfe, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 
    0x00, 0x0f, 0xff, 0x80, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap_front, 26, 24, u16ColorF);

  // 'Gast hinten', 26x24px
  const uint8_t bitmap_back[] = {
    0x00, 0xe0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
    0x0f, 0xfe, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 
    0x0f, 0xf8, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 
    0x07, 0xf8, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
    0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 
    0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos, yPos, bitmap_back, 26, 24, u16ColorB);

  setTextColor(u16ColorF, ILI9341_BLACK);
  setTextSize(1);
  setCursor(xPos + 24, yPos + 1);
  print("Gast");
}

void ILI9341_Graphic::Logo(int xPos, int yPos)
{
  fillRoundRect(xPos, yPos, 120, 87, 10, ILI9341_YELLOW);
  drawRoundRect(xPos, yPos, 120, 87, 10, ILI9341_DARKCYAN);
  drawRoundRect(xPos+1, yPos+1, 118, 85, 10, ILI9341_BLUE);
  drawRoundRect(xPos+2, yPos+2, 116, 83, 9, ILI9341_BLUE);
    
  // 'Logo Tiny Black', 100x67px
  const uint8_t bitmapBlack[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
    0x04, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x81, 0x00, 0x40, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x41, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x10, 0x01, 0x80, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0x03, 0xc0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 
    0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x06, 0x00, 0x03, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0c, 0x03, 0x80, 0x41, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x07, 0x80, 0x41, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x02, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x06, 0x18, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 
    0x18, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x18, 0x00, 0x40, 
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x90, 0x00, 0x40, 0x06, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x30, 0x2a, 0xc4, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x18, 0x30, 0x3f, 0xc7, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x10, 0x20, 0x3f, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x20, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x03, 0x00, 0x80, 
    0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x80, 0x03, 0x00, 0x80, 0x02, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x20, 0x10, 0x80, 0x03, 0x00, 0x8c, 0x06, 0x04, 0x20, 0x41, 0x00, 0x00, 
    0x08, 0x20, 0x10, 0x00, 0x03, 0x00, 0x8e, 0x1e, 0x04, 0x20, 0x61, 0x00, 0x00, 0x00, 0x00, 0x10, 
    0x40, 0x03, 0x00, 0x82, 0x1e, 0x04, 0x20, 0x41, 0x00, 0x00, 0x00, 0x10, 0x10, 0x40, 0x03, 0x00, 
    0x82, 0x10, 0x0c, 0x20, 0x01, 0x80, 0x00, 0x00, 0x10, 0x10, 0x40, 0x03, 0x00, 0x82, 0x10, 0x0c, 
    0x20, 0x01, 0x80, 0x00, 0x00, 0x10, 0x10, 0x40, 0x03, 0x00, 0x82, 0x10, 0x08, 0x20, 0x03, 0x80, 
    0x00, 0x00, 0x10, 0x10, 0x40, 0x03, 0x00, 0x82, 0x10, 0x08, 0x20, 0x07, 0x00, 0x00, 0x00, 0x00, 
    0x10, 0xc0, 0x03, 0x00, 0x82, 0x10, 0x08, 0x20, 0x07, 0x00, 0x00, 0x00, 0x08, 0x10, 0xc0, 0x03, 
    0x00, 0x82, 0x10, 0x08, 0x20, 0x06, 0x00, 0x00, 0x02, 0x08, 0x00, 0xc0, 0xc3, 0x00, 0x82, 0x10, 
    0x00, 0x20, 0x00, 0x00, 0x00, 0x43, 0x08, 0x00, 0x80, 0xc3, 0x00, 0x82, 0x10, 0x80, 0x60, 0x42, 
    0x00, 0x00, 0x66, 0x00, 0x00, 0x80, 0xe3, 0x00, 0x82, 0x10, 0x00, 0x60, 0x40, 0x00, 0x00, 0x46, 
    0x04, 0x01, 0x80, 0xd3, 0x00, 0x82, 0x10, 0x00, 0xe0, 0x40, 0x00, 0x07, 0xce, 0x04, 0x83, 0x80, 
    0xcb, 0x0f, 0x82, 0xf0, 0x01, 0xc3, 0x43, 0x00, 0x07, 0xcc, 0x7c, 0x7f, 0x0f, 0xc7, 0x0f, 0x81, 
    0xf0, 0x3f, 0xc3, 0xdf, 0x00, 0x00, 0x4c, 0x7c, 0x3e, 0x07, 0xc3, 0x00, 0x01, 0xc0, 0x1f, 0x80, 
    0xce, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos + 10, yPos + 10, bitmapBlack, 100, 67, ILI9341_BLACK);
  
 // 'Logo Tiny Red', 100x67px
  const uint8_t bitmapRed[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 
    0x38, 0x01, 0x81, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe3, 0x3f, 0x7f, 0x87, 
    0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe3, 0x3e, 0x7f, 0x8f, 0xfe, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7, 0xbe, 0x7f, 0x8f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xe7, 0xfe, 0x7f, 0x8f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0xff, 0xfc, 0x7c, 0x0f, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x78, 
    0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x78, 0x0f, 0xfc, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0x7f, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x7f, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xff, 0xf8, 0x7f, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 
    0x7f, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x7c, 0x0f, 0xbe, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x78, 0x0f, 0xbe, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0xf0, 0x7d, 0x0f, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x79, 0xe0, 0x7f, 0x8f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
    0xe0, 0x7f, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xe0, 0x7f, 0x8f, 
    0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0x7f, 0x8f, 0xf8, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x55, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x40, 0x80, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0xe1, 
    0x80, 0x7e, 0x0c, 0x3c, 0x1f, 0x1f, 0xfc, 0x3f, 0x07, 0xf8, 0x00, 0x00, 0xe1, 0xc0, 0xff, 0x0e, 
    0x3c, 0x1f, 0x1f, 0xfc, 0x3f, 0x87, 0xfc, 0x00, 0x00, 0xe3, 0xc0, 0xff, 0x0f, 0x3c, 0x1f, 0x1f, 
    0xfc, 0x7f, 0xc7, 0xfe, 0x00, 0x00, 0xe3, 0xc1, 0xff, 0x0f, 0xbc, 0x1f, 0x1f, 0xfc, 0x7f, 0xc7, 
    0xfe, 0x00, 0x01, 0xf7, 0xc1, 0xef, 0x0f, 0xfc, 0x1f, 0x03, 0xf8, 0xfb, 0xc7, 0xbe, 0x00, 0x01, 
    0xf7, 0xc1, 0xef, 0x8f, 0xfc, 0x1f, 0x01, 0xe0, 0xfb, 0xc7, 0x9e, 0x00, 0x01, 0xff, 0xe1, 0xef, 
    0x8f, 0xfc, 0x1f, 0x01, 0xe0, 0xfb, 0xc7, 0x9e, 0x80, 0x03, 0xff, 0xe3, 0xef, 0x8f, 0xfc, 0x1f, 
    0x01, 0xe0, 0xf3, 0xc7, 0xfe, 0x00, 0x03, 0xff, 0xe3, 0xef, 0x8f, 0xfc, 0x1f, 0x01, 0xe0, 0xf3, 
    0xc7, 0xfe, 0x00, 0x03, 0xff, 0xe3, 0xef, 0x8f, 0xfc, 0x1f, 0x01, 0xe0, 0xf7, 0xc7, 0xfc, 0x00, 
    0x03, 0xff, 0xe3, 0xef, 0x8f, 0xfc, 0x1f, 0x01, 0xe0, 0xf7, 0xc7, 0xf8, 0x00, 0x07, 0xff, 0xf3, 
    0xef, 0x0f, 0xfc, 0x1f, 0x01, 0xe0, 0xf7, 0xc7, 0xf8, 0x00, 0x07, 0xff, 0xf1, 0xef, 0x0f, 0xfc, 
    0x1f, 0x01, 0xe0, 0xf7, 0xc7, 0xf8, 0x00, 0x07, 0xfd, 0xf1, 0xff, 0x0f, 0x3c, 0x1f, 0x01, 0xe0, 
    0xff, 0xc7, 0xfc, 0x00, 0x07, 0xbc, 0xf1, 0xff, 0x0f, 0x3c, 0x1f, 0x01, 0xe0, 0x7f, 0x87, 0xbc, 
    0x00, 0x0f, 0x99, 0xf9, 0xff, 0x0f, 0x1c, 0x1f, 0x01, 0xe0, 0x7f, 0x87, 0xbe, 0x00, 0x0f, 0xb8, 
    0xf8, 0xfe, 0x0f, 0x0c, 0x1f, 0x01, 0xe0, 0x7f, 0x07, 0xbe, 0x00, 0x00, 0x10, 0xf8, 0x7c, 0x0f, 
    0x04, 0x00, 0x01, 0x00, 0x3e, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos + 10, yPos + 10, bitmapRed, 100, 67, 0xB000);
  
 // 'Logo Tiny Blue', 100x67px
  const uint8_t bitmapBlue[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 
    0xc3, 0xf8, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0xc0, 0x80, 0x70, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x40, 0x80, 0x30, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 
    0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x80, 
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x81, 0xf0, 0x00, 0x80, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x80, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x1f, 0x00, 0x01, 0x80, 0xf0, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x3f, 0x00, 0x01, 0x80, 0x70, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x03, 
    0x80, 0x70, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x03, 0x80, 0x70, 0x00, 
    0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x03, 0x80, 0x70, 0x00, 0xf8, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x03, 0x80, 0x70, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0xff, 0x80, 0x07, 0x80, 0x70, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x81, 
    0x07, 0x80, 0x30, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc1, 0x07, 0x80, 0x30, 
    0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc3, 0x0f, 0x80, 0x30, 0x01, 0xfe, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc3, 0x8f, 0x80, 0x38, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0xff, 0xc7, 0x8f, 0xc0, 0x38, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 
    0xef, 0xdf, 0xc0, 0x3e, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xef, 0xdf, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x07, 0xc7, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0x81, 0xf3, 0xc1, 0xe0, 0xe0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xf1, 
    0xc1, 0xe0, 0xe0, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0xf0, 0xc0, 0xe0, 0x60, 
    0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x70, 0x40, 0xe0, 0x60, 0x01, 0x80, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x70, 0x00, 0xe0, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x70, 0x00, 0xe0, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x30, 0x00, 0xe0, 0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xe0, 
    0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 
    0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xe0, 0x7c, 0x0f, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xe0, 0x7c, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x70, 0x20, 0xe0, 0x7c, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 
    0x30, 0xf0, 0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x38, 0xf0, 0x7e, 
    0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x3c, 0xff, 0xfe, 0x30, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x03, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 
    0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };
  drawBitmap(xPos + 10, yPos + 10, bitmapBlue, 100, 67, ILI9341_BLUE);
}

void ILI9341_Graphic::MessageScreen_01(String sIP_Address)
{
  int iPosX = 10;
  int iPosY = 20;

  fillScreen(ILI9341_BLACK);
  Logo(190,10);
  setTextSize(1);
  setTextColor(ILI9341_WHITE);
  setCursor(iPosX, iPosY);
  println("Der Router ist noch nicht");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("konfiguriert. Zur");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Konfiguration einen Computer");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("mit dem WLAN \"Web_Monitor\"");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("verbinden und die Website");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("http:\/\/" + sIP_Address + "\/index.html");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("mit einem Browser \224ffnen.");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Die Konfigurationswerte eintragen und auf den");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Button \"Alle Werte \201bernehmen\" klicken.");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Danach den Router neu starten.");
  iPosY = iPosY = iPosY + 30; setCursor(iPosX, iPosY);
  setTextColor(ILI9341_YELLOW);
  println("ACHTUNG: Unbedingt auch die auf der Website");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("beschriebenen Einstellungen f\201r die TR-064");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Kommunikation im Router vornehmen.");
}

void ILI9341_Graphic::MessageScreen_02(String sWifiSSID, String sWifiPassword, String sTR064_User, String sTR064_Password, String sMaxDL_Speed, String sMaxUL_Speed)
{
  int iPosX = 10;
  int iPosY = 20;

  fillScreen(ILI9341_BLACK);
  Logo(190,10);
  setTextSize(1);
  setTextColor(ILI9341_WHITE);
  setCursor(iPosX, iPosY);
  println("WLAN Name:");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("   \"" + sWifiSSID + "\"");
  iPosY = iPosY + 20;setCursor(iPosX, iPosY);
  println("WLAN Passwort:");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("   \"" + sWifiPassword + "\"");
  iPosY = iPosY + 20; setCursor(iPosX, iPosY);
  println("TR-064 User:");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("   \"" + sTR064_User + "\"");
  iPosY = iPosY + 20; setCursor(iPosX, iPosY);
  println("TR-064 Passwort:");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("   \"" + sTR064_Password + "\"");
  iPosY = iPosY + 20; setCursor(iPosX, iPosY);
  println("Download Speed - Upload Speed:");             //#######################################################################################
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);                    //#######################################################################################
  print("   " + sMaxDL_Speed + " MBit/s - ");                            //#######################################################################################
  println(sMaxUL_Speed + " MBit/s");                                  //#######################################################################################
  setTextColor(ILI9341_CYAN);
  iPosY = iPosY + 20; setCursor(iPosX, iPosY);
  println("Jetzt den Web-Monitor neu starten.");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("Dazu einen Taster dr\201cken oder die Spannungs-");
  iPosY = iPosY + 15; setCursor(iPosX, iPosY);
  println("versorgung kurz trennen und wieder verbinden.");
}

void ILI9341_Graphic::MessageScreen_03(void)
{
  int iPosX = 10;
  int iPosY = 110;

  fillScreen(ILI9341_BLACK);
  Logo(190,0);
  setTextSize(2);
  setTextColor(ILI9341_WHITE);
  setCursor(iPosX, iPosY);
  println("Die Taste ca. 8 Sekunden");
  iPosY = iPosY + 25; setCursor(iPosX, iPosY);
  println("gedr\201ckt halten, um");
  iPosY = iPosY + 25; setCursor(iPosX, iPosY);
  println("die existierende");
  iPosY = iPosY + 25; setCursor(iPosX, iPosY);
  println("Konfiguration zu l\224schen.");
}

void ILI9341_Graphic::MessageScreen_04(void)
{
  int iPosX = 10;
  int iPosY = 100;

  fillScreen(ILI9341_BLACK);
  Logo(190,0);
  setTextSize(2);
  setTextColor(ILI9341_RED);
  setCursor(iPosX, iPosY);
  println("Die Konfiguration wurde");
  iPosY = iPosY + 25; setCursor(iPosX, iPosY);
  println("vollst\204ndig gel\224scht!");
  setTextColor(ILI9341_WHITE);
  iPosY = iPosY + 50; setCursor(iPosX, iPosY);
  println("In wenigen Sekunden wird");
  iPosY = iPosY + 25; setCursor(iPosX, iPosY);
  println("ein Neustart durchgef\201hrt");
}
